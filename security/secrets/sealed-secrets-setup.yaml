# Sealed Secrets Configuration for Pathavana
# Provides encryption of secrets in Git repositories

# Install Sealed Secrets Controller
apiVersion: v1
kind: Namespace
metadata:
  name: kube-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sealedsecrets.bitnami.com
spec:
  group: bitnami.com
  names:
    kind: SealedSecret
    listKind: SealedSecretList
    plural: sealedsecrets
    singular: sealedsecret
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              data:
                type: string
              encryptedData:
                additionalProperties:
                  type: string
                type: object
              template:
                properties:
                  data:
                    additionalProperties:
                      type: string
                    type: object
                  metadata:
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                  type:
                    type: string
                type: object
            required:
            - encryptedData
            type: object
        type: object
    served: true
    storage: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - bitnami.com
  resources:
  - sealedsecrets
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: sealed-secrets-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: sealed-secrets-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: sealed-secrets-controller
    spec:
      containers:
      - args:
        - --update-status
        - --rotate-encryption-keys
        command:
        - controller
        env:
        - name: SEALED_SECRETS_UPDATE_STATUS
          value: "true"
        image: quay.io/bitnami/sealed-secrets-controller:v0.24.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 1
        name: sealed-secrets-controller
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      serviceAccountName: sealed-secrets-controller
      volumes:
      - emptyDir: {}
        name: tmp
---
# Example SealedSecret for Pathavana (production secrets)
# This would be generated using kubeseal tool
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: pathavana-sealed-secrets
  namespace: pathavana-production
spec:
  encryptedData:
    # These would be encrypted using kubeseal
    # Example: echo -n mypassword | kubeseal --raw --from-file=/dev/stdin --name pathavana-sealed-secrets --namespace pathavana-production
    DATABASE_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...  # Encrypted password
    SECRET_KEY: AgAKAoiQm+wvqzSk8ta7XDaEpLU3j/r9L1kw...  # Encrypted secret key
    OPENAI_API_KEY: AgCKN1TZzGKTVqaJmwNBqlzVHvqEL5aQ...  # Encrypted API key
  template:
    metadata:
      name: pathavana-secrets
      namespace: pathavana-production
    type: Opaque
---
# Secret Management Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-management-policy
  namespace: pathavana-production
data:
  policy.md: |
    # Secret Management Policy for Pathavana
    
    ## Principles
    1. All secrets MUST be encrypted at rest
    2. Secrets MUST NOT be stored in plain text in Git repositories
    3. Access to secrets MUST be logged and audited
    4. Secrets MUST be rotated regularly
    5. Production secrets MUST be managed by authorized personnel only
    
    ## Implementation
    - Use Sealed Secrets for Kubernetes secret encryption
    - Use AWS Secrets Manager or HashiCorp Vault for external secret management
    - Implement secret rotation policies
    - Use least privilege access for secret access
    - Monitor and alert on secret access patterns
    
    ## Secret Categories
    1. Database credentials - Rotate every 90 days
    2. API keys - Rotate every 180 days
    3. Encryption keys - Rotate every 365 days
    4. Certificates - Rotate every 365 days or before expiry
    
    ## Emergency Procedures
    1. In case of secret compromise, immediately rotate all related secrets
    2. Revoke access for compromised accounts
    3. Audit all access logs for the compromised period
    4. Notify security team and stakeholders
---
# Secret Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-check
  namespace: pathavana-production
spec:
  schedule: "0 2 * * 1"  # Every Monday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: secret-rotation-check
            image: alpine:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Checking secret rotation status..."
              # Add logic to check secret ages and notify if rotation needed
              # This would integrate with your secret management system
              echo "Secret rotation check completed"
          restartPolicy: OnFailure
          serviceAccountName: pathavana-monitoring