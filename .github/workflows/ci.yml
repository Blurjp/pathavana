name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_DB: pathavana_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist

    - name: Validate environment
      run: |
        cd backend
        python ../scripts/env/validate_env.py --env test

    - name: Run linting
      run: |
        cd backend
        pip install flake8 black isort mypy
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app
        isort --check-only app
        mypy app --ignore-missing-imports

    - name: Run security checks
      run: |
        cd backend
        pip install safety bandit
        safety check
        bandit -r app -f json

    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/pathavana_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --maxfail=1 --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build application
      run: |
        cd frontend
        npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Docker Build Tests
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: false
        tags: pathavana-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: production
        push: false
        tags: pathavana-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cp .env.example .env
        # Set test values
        sed -i 's/your-secret-key-change-in-production-replace-with-64-character-hex/test-secret-key-for-integration-testing-only-not-secure/' .env
        sed -i 's/DEBUG=true/DEBUG=false/' .env

    - name: Start services
      run: |
        docker-compose up -d postgres redis backend
        sleep 30

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Install test dependencies
        pip install requests pytest
        # Run integration tests
        python -m pytest backend/tests/test_integration.py -v

    - name: Check service logs
      if: failure()
      run: |
        docker-compose logs backend
        docker-compose logs postgres
        docker-compose logs redis

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  # Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=frontend/package.json

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: |
        cp .env.example .env
        sed -i 's/your-secret-key-change-in-production-replace-with-64-character-hex/test-secret-key/' .env
        docker-compose up -d
        sleep 60

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npm install -g @axe-core/cli

    - name: Build application
      run: |
        cd frontend
        npm run build

    - name: Serve application
      run: |
        cd frontend
        npx serve -s build -p 3000 &
        sleep 10

    - name: Run accessibility tests
      run: |
        axe http://localhost:3000 --exit

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, integration-tests, security-scan]
    if: always()

    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI Pipeline passed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI Pipeline failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}