name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pathavana_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/pathavana_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        TESTING: 1
      run: |
        # Create test database tables
        python -c "
        import asyncio
        from app.core.database import engine, Base
        
        async def create_tables():
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
        
        asyncio.run(create_tables())
        "

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/pathavana_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        TESTING: 1
        # Mock external API keys for testing
        AMADEUS_API_KEY: test_key
        AMADEUS_API_SECRET: test_secret
        OPENAI_API_KEY: test_key
        ANTHROPIC_API_KEY: test_key
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80 -v

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Archive backend test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/pytest-report.xml

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Run frontend tests
      working-directory: ./frontend
      env:
        CI: true
        REACT_APP_API_BASE_URL: http://localhost:8000
        REACT_APP_ENVIRONMENT: test
      run: npm run test:ci

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Archive frontend test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pathavana_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Set up test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/pathavana_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        TESTING: 1
      run: |
        python -c "
        import asyncio
        from app.core.database import engine, Base
        
        async def create_tables():
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
        
        asyncio.run(create_tables())
        "

    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/pathavana_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key-for-ci
        TESTING: 1
        AMADEUS_API_KEY: test_key
        AMADEUS_API_SECRET: test_secret
        OPENAI_API_KEY: test_key
        ANTHROPIC_API_KEY: test_key
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo $! > backend.pid
        sleep 10  # Wait for server to start

    - name: Build frontend
      working-directory: ./frontend
      env:
        REACT_APP_API_BASE_URL: http://localhost:8000
        REACT_APP_ENVIRONMENT: test
      run: npm run build

    - name: Install Playwright
      working-directory: ./frontend
      run: |
        npm install -D @playwright/test
        npx playwright install

    - name: Run E2E tests
      working-directory: ./frontend
      env:
        REACT_APP_API_BASE_URL: http://localhost:8000
        REACT_APP_ENVIRONMENT: test
      run: |
        npm start &
        echo $! > frontend.pid
        sleep 30  # Wait for frontend to start
        npx playwright test --reporter=html

    - name: Stop servers
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi

    - name: Archive E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/

  security-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/typescript

  performance-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        npm install -g @lhci/cli
        lhci autorun || echo "Lighthouse CI completed with warnings"

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
        fi